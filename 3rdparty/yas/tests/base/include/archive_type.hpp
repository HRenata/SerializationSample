
// Copyright (c) 2010-2021 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__archive_type_hpp
#define __yas__tests__base__include__archive_type_hpp

/***************************************************************************/

template<typename archive_traits>
bool archive_type_test(std::ostream &/*log*/, const char */*archive_type*/, const char */*test_name*/) {
    {
        using oarchive_type = typename yas::get_output_archive<
            archive_traits::oarchive_type::flags() | yas::mem
        >::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, typename archive_traits::oarchive_type::stream_type>::value, "");
        static_assert(std::is_same<oarchive_type, typename archive_traits::oarchive_type>::value, "");

        using iarchive_type = typename yas::get_input_archive<
            archive_traits::iarchive_type::flags() | yas::mem
        >::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, typename archive_traits::iarchive_type::stream_type>::value, "");
        static_assert(std::is_same<iarchive_type, typename archive_traits::iarchive_type>::value, "");
    }
    // binary
    {
        constexpr auto F = yas::binary|yas::ehost|yas::compacted|yas::mem;

        using oarchive_type = typename yas::get_output_archive<F>::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, yas::mem_ostream>::value, "");
        static_assert(std::is_same<oarchive_type, yas::binary_oarchive<yas::mem_ostream, (F & (~yas::mem))>>::value, "");

        using iarchive_type = typename yas::get_input_archive<F>::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, yas::mem_istream>::value, "");
        static_assert(std::is_same<iarchive_type, yas::binary_iarchive<yas::mem_istream, (F & (~yas::mem))>>::value, "");
    }
    {
        constexpr auto F = yas::binary|yas::ehost|yas::compacted|yas::file;

        using oarchive_type = typename yas::get_output_archive<F>::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, yas::file_ostream>::value, "");
        static_assert(std::is_same<oarchive_type, yas::binary_oarchive<yas::file_ostream, (F & (~yas::file))>>::value, "");

        using iarchive_type = typename yas::get_input_archive<F>::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, yas::file_istream>::value, "");
        static_assert(std::is_same<iarchive_type, yas::binary_iarchive<yas::file_istream, (F & (~yas::file))>>::value, "");
    }
    // text
    {
        constexpr auto F = yas::text|yas::mem;

        using oarchive_type = typename yas::get_output_archive<F>::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, yas::mem_ostream>::value, "");
        static_assert(std::is_same<oarchive_type, yas::text_oarchive<yas::mem_ostream, (F & (~yas::mem))>>::value, "");

        using iarchive_type = typename yas::get_input_archive<F>::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, yas::mem_istream>::value, "");
        static_assert(std::is_same<iarchive_type, yas::text_iarchive<yas::mem_istream, (F & (~yas::mem))>>::value, "");
    }
    {
        constexpr auto F = yas::text|yas::file;

        using oarchive_type = typename yas::get_output_archive<F>::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, yas::file_ostream>::value, "");
        static_assert(std::is_same<oarchive_type, yas::text_oarchive<yas::file_ostream, (F & (~yas::file))>>::value, "");

        using iarchive_type = typename yas::get_input_archive<F>::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, yas::file_istream>::value, "");
        static_assert(std::is_same<iarchive_type, yas::text_iarchive<yas::file_istream, (F & (~yas::file))>>::value, "");
    }
    // json
    {
        constexpr auto F = yas::json|yas::compacted|yas::mem;

        using oarchive_type = typename yas::get_output_archive<F>::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, yas::mem_ostream>::value, "");
        static_assert(std::is_same<oarchive_type, yas::json_oarchive<yas::mem_ostream, (F & (~yas::mem))>>::value, "");

        using iarchive_type = typename yas::get_input_archive<F>::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, yas::mem_istream>::value, "");
        static_assert(std::is_same<iarchive_type, yas::json_iarchive<yas::mem_istream, (F & (~yas::mem))>>::value, "");
    }
    {
        constexpr auto F = yas::json|yas::compacted|yas::file;

        using oarchive_type = typename yas::get_output_archive<F>::archive_type;
        using ostream_type = typename oarchive_type::stream_type;
        static_assert(std::is_same<ostream_type, yas::file_ostream>::value, "");
        static_assert(std::is_same<oarchive_type, yas::json_oarchive<yas::file_ostream, (F & (~yas::file))>>::value, "");

        using iarchive_type = typename yas::get_input_archive<F>::archive_type;
        using istream_type = typename iarchive_type::stream_type;
        static_assert(std::is_same<istream_type, yas::file_istream>::value, "");
        static_assert(std::is_same<iarchive_type, yas::json_iarchive<yas::file_istream, (F & (~yas::file))>>::value, "");
    }

    return true;
}

/***************************************************************************/

#endif // __yas__tests__base__include__archive_type_hpp
